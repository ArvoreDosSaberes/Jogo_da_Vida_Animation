name: Generate Game of Life SVG

on:
  workflow_dispatch:
    inputs:
      username:
        description: "GitHub username to use for contributions graph (defaults to repo owner)"
        required: false
        default: ""
      steps:
        description: "Number of simulation steps"
        required: false
        default: "120"
      frame_duration:
        description: "Seconds per frame"
        required: false
        default: "0.08"
      target_repo:
        description: "Optional owner/repo to publish output branch to (default: this repo)"
        required: false
        default: ""
  schedule:
    - cron: '17 2 1 * *'  # daily
  push:
    branches: [ main, master ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Determine username
        id: who
        uses: actions/github-script@v7
        with:
          script: |
            const inputUsername = (context.payload && context.payload.inputs && context.payload.inputs.username) || process.env.INPUT_USERNAME || '';
            if (inputUsername) {
              core.info(`Using provided username: ${inputUsername}`);
              core.setOutput('user', inputUsername);
              return;
            }
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const { data: user } = await github.rest.users.getByUsername({ username: owner });
            if (user.type === 'Organization') {
              try {
                // 1) Try org admins (may require org-level permissions)
                const { data: admins } = await github.request('GET /orgs/{org}/members', {
                  org: owner,
                  role: 'admin',
                  headers: { 'X-GitHub-Api-Version': '2022-11-28' }
                });
                if (Array.isArray(admins) && admins.length) {
                  const login = admins[0].login;
                  core.info(`Owner is an org. Using admin (org): ${login}`);
                  core.setOutput('user', login);
                  return;
                }
              } catch (e) {
                core.warning(`Failed to list org admins: ${e.message}`);
              }

              // 2) Try repo collaborators with admin permission
              try {
                const { data: collabs } = await github.rest.repos.listCollaborators({
                  owner,
                  repo,
                  permission: 'admin',
                });
                const pick = (collabs || []).find(c => c.type === 'User' && c.login !== 'github-actions[bot]') || (collabs || [])[0];
                if (pick && pick.login) {
                  core.info(`Owner is an org. Using admin (repo collaborator): ${pick.login}`);
                  core.setOutput('user', pick.login);
                  return;
                }
              } catch (e) {
                core.warning(`Failed to list repo collaborators with admin: ${e.message}`);
              }

              // 3) Try any org member as a last resort
              try {
                const { data: members } = await github.rest.orgs.listMembers({ org: owner });
                if (Array.isArray(members) && members.length) {
                  const login = members[0].login;
                  core.info(`Owner is an org. Using member: ${login}`);
                  core.setOutput('user', login);
                  return;
                }
              } catch (e) {
                core.warning(`Failed to list org members: ${e.message}`);
              }

              // 4) Fall back to triggering actor to ensure a real user
              const actor = (context && (context.triggering_actor || context.actor)) || process.env.GITHUB_ACTOR || owner;
              core.info(`Falling back to actor: ${actor}`);
              core.setOutput('user', actor);
            } else {
              core.setOutput('user', owner);
            }

      - name: Generate animated SVGs (light and dark)
        run: |
          mkdir -p dist
          # Light theme
          python scripts/generate_svg.py \
            --username "${{ steps.who.outputs.user }}" \
            --steps "${{ github.event.inputs.steps || '120' }}" \
            --frame-duration "${{ github.event.inputs.frame_duration || '0.08' }}" \
            --alive-color "#2ea043" --dead-color "#ebedf0" \
            --out dist/game-of-live-contribution-graph.svg
          # Dark theme
          python scripts/generate_svg.py \
            --username "${{ steps.who.outputs.user }}" \
            --steps "${{ github.event.inputs.steps || '120' }}" \
            --frame-duration "${{ github.event.inputs.frame_duration || '0.08' }}" \
            --alive-color "#39d353" --dead-color "#161b22" \
            --out dist/game-of-live-contribution-graph-dark.svg

      - name: Validate SVGs
        run: |
          python scripts/validate_svg.py dist/game-of-live-contribution-graph.svg
          python scripts/validate_svg.py dist/game-of-live-contribution-graph-dark.svg

      - name: Publish to output branch
        env:
          DEFAULT_REPO: ${{ github.repository }}
          INPUT_REPO: ${{ github.event.inputs.target_repo }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_TOKEN: ${{ secrets.PUBLISH_TOKEN }}
        run: |
          set -euo pipefail
          TARGET_REPO="${INPUT_REPO:-$DEFAULT_REPO}"
          echo "Publishing to $TARGET_REPO branch 'output'"
          mkdir -p publish
          cp dist/game-of-live-contribution-graph*.svg publish/
          cd publish
          git init
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Choose appropriate token: if pushing to another repo, require PUBLISH_TOKEN
          if [ "$TARGET_REPO" != "$DEFAULT_REPO" ]; then
            if [ -z "${PUBLISH_TOKEN}" ]; then
              echo "ERROR: target_repo differs from current repo but secrets.PUBLISH_TOKEN is not set" >&2
              exit 1
            fi
            AUTH_TOKEN="$PUBLISH_TOKEN"
          else
            AUTH_TOKEN="$GITHUB_TOKEN"
          fi
          git remote add origin "https://x-access-token:${AUTH_TOKEN}@github.com/${TARGET_REPO}.git"
          # Fetch output branch if it exists
          if git ls-remote --exit-code --heads origin output >/dev/null 2>&1; then
            git fetch origin output:output
            git checkout output
            # Clean existing files
            ls -A | grep -v ".git" | xargs -r rm -rf
          else
            git checkout --orphan output
          fi
          cp ../dist/game-of-live-contribution-graph*.svg ./
          git add *.svg || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore: update Game of Life contribution SVGs"
            git push -u origin output
          fi

